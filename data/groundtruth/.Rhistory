}
}
m
sum(m)/76
EAER <- sum(m)/76
APEr
APER
pred
pred$posterior
ldahist(data = pred$x[,1],g=dat$Breed)
ldahist(data = pred$x[,2],g=dat$Breed)
ldahist(data = pred$x[,1],g=dat$Breed)
ldahist(data = pred$x[,2],g=dat$Breed)
plot(pred$posterior[,1],pred$x[,1])
plot(pred$x[,1],pred$posterior[,1])
plot(pred$x[,3],pred$posterior[,1])
plot(pred$x[,2],pred$posterior[,1])
plot(pred$x[,2],pred$posterior[,2])
plot(pred$x[,2],pred$posterior[,3])
plot(pred$x[,1],pred$posterior[,1])
plot(pred$x[,1],pred$posterior[,2])
plot(pred$x[,1],pred$posterior[,3])
plot(pred$x[,1],pred$posterior[,2])
plot(pred$x[,1],pred$posterior[,2])
plot(pred$x[,1],pred$posterior[,1])
cbind(pred$x[,1],pred$posterior[,1])
data.frame(cbind(pred$x[,1],pred$posterior[,1]))
ggplot(data.frame(cbind(pred$x[,1],pred$posterior[,3])),aes(x=X1,y=X2,color=pal[1]))+
geom_point(show.legend=F)+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
ldahist(data = pred$x[,1],g=dat$Breed)
ldahist(data = pred$x[,2],g=dat$Breed)
ggplot(data.frame(cbind(pred$x[,1],pred$posterior[,3])),aes(x=X1,y=X2,color=pal[1]))+
geom_point(show.legend=F)+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
ggplot(data.frame(cbind(pred$x[,1],pred$posterior[,1])),aes(x=X1,y=X2,color=pal[2]))+
geom_point(show.legend=F)+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
ggplot(data.frame(cbind(pred$x[,1],pred$posterior[,1])),aes(x=X1,y=X2))+
geom_point(show.legend=Fcolor=pal[2])+
ggplot(data.frame(cbind(pred$x[,1],pred$posterior[,1])),aes(x=X1,y=X2))+
geom_point(show.legend=F,color=pal[2])+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
data.frame(rbind(cbind(pred$x[,1],pred$posterior[,1]),cbind(pred$x[,1],pred$posterior[,2]),cbind(pred$x[,1],pred$posterior[,3])))
data.frame(rbind(cbind(pred$x[,1],pred$posterior[,1]),cbind(pred$x[,1],pred$posterior[,2]),cbind(pred$x[,1],pred$posterior[,3])))
data.frame(rbind(cbind(pred$x[,1],pred$posterior[,1]),cbind(pred$x[,1],pred$posterior[,2]),cbind(pred$x[,1],pred$posterior[,3])),c(rep("1",76),rep("5",76),rep("8",76)))
temp<-data.frame(rbind(cbind(pred$x[,1],pred$posterior[,1]),cbind(pred$x[,1],pred$posterior[,2]),cbind(pred$x[,1],pred$posterior[,3])),c(rep("1",76),rep("5",76),rep("8",76)))
colnames(temp)<-c("X1","X2","group")
g4<-ggplot(temp,aes(x=X1,y=X2,group=group))+
geom_point(show.legend=F,color=pal[3])+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F,color=pal[2])+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
g4
g4<-ggplot(temp,aes(x=X1,y=X2,group=group,color=c(pal[1],pal[3],pal[5])))+
geom_point(show.legend=F,color=pal[3])+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F,color=pal[2])+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
g4
g4<-ggplot(temp,aes(x=X1,y=X2,group=group,color=c(pal[1],pal[3],pal[5])))+
geom_point(show.legend=F)+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
g4
g4<-ggplot(temp,aes(x=X1,y=X2,group=group,color=group))+
geom_point(show.legend=F)+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
scale_color_manual(values=c(pal[1],pal[3],pal[5]))+
labs(title="Scatterplot of Long and Fine Fibre Fraction",x="Long Fibre Fraction",y="Fine Fibre Fraction")
g4
g4<-ggplot(temp,aes(x=X1,y=X2,group=group,color=group))+
geom_point(show.legend=F)+
geom_smooth(method = "loess",formula = "y~x",se=F,show.legend = F)+
fte_theme()+
scale_color_manual(values=c(pal[1],pal[3],pal[5]))+
labs(title="Posterior Probabilities of Each Group",x="Value of Discriminant Funcion 1",y="Probability of Belonging to Group",color="Breed")
g4
g4<-ggplot(temp,aes(x=X1,y=X2,group=group,color=group))+
geom_point()+
geom_smooth(method = "loess",formula = "y~x",se=F)+
fte_theme()+
scale_color_manual(values=c(pal[1],pal[3],pal[5]))+
labs(title="Posterior Probabilities of Each Group",x="Value of Discriminant Funcion 1",y="Probability of Belonging to Group",color="Breed")
g4
ldahist(data = pred$x[,1],g=dat$Breed)
ldahist(data = pred$x[,2],g=dat$Breed)
ggplot(temp,aes(x=X1,y=X2,group=group,color=group))+
geom_point()+
geom_smooth(method = "loess",formula = "y~x",se=F)+
fte_theme()+
scale_color_manual(values=c(pal[1],pal[3],pal[5]))+
labs(title="Posterior Probabilities of Each Group",x="Value of Discriminant Funcion 1",y="Probability of Belonging to Group",color="Breed")
ldahist(data = pred$x[,1],g=dat$Breed)
ldahist(data = pred$x[,2],g=dat$Breed)
ggplot(temp,aes(x=X1,y=X2,group=group,color=group))+
geom_point()+
geom_smooth(method = "loess",formula = "y~x",se=F)+
fte_theme()+
scale_color_manual(values=c(pal[1],pal[3],pal[5]))+
labs(title="Posterior Probabilities of Each Group",x="Value of Discriminant Funcion 1",y="Probability of Belonging to Group",color="Breed")
table(data$Breed,data$Frame)
author
table(authors)
table(data$Breed,data$Frame)
data.frame(table(data$Breed,data$Frame))
data.frame(prop(table(data$Breed,data$Frame)))
?prop
as.data.frame.matrix(table(data$Breed,data$Frame))
data/frame(as.data.frame.matrix(table(data$Breed,data$Frame)))
data.frame(as.data.frame.matrix(table(data$Breed,data$Frame)))
colnames(ct) <- c("5","6","7","8")
ct <- data.frame(as.data.frame.matrix(table(data$Breed,data$Frame)))
colnames(ct) <- c("5","6","7","8")
ct
ct <- data.frame(as.data.frame.matrix(table(data$Breed,data$Frame)))
colnames(ct) <- c("5","6","7","8")
#display table
kable_styling(kableExtra::kable(ct,
caption="Cross Tabulation of Breed with Frame"),
full_width = F,
latex_options = c("striped","hold_position"))
ct <- data.frame(as.data.frame.matrix(table(data$Breed,data$Frame)))
colnames(ct) <- c("5","6","7","8")
#display table
kable_styling(kableExtra::kable(ct,
caption="Cross Tabulation of Breed with Frame"),
full_width = F,
latex_options = c("striped","hold_position"))
ca(ct)
canal<-ca(ct)
canal
#From first principles
ct/sum(ct)
P<-ct/sum(ct)
#acrros rows
rm<-apply(P,1,sum)
#down columns
cm<-apply(P,2,sum)
#observed-expected
S<-diag(sqrt(1/rm))%*%(as.matrix(P)-rm%*%t(cm))%*%diag(sqrt(1/cm))
#perform svd
svdS<-svd(S)
canal<-diag(1/sqrt(rm))%*%svdS$u%*%diag(svdS$d
canal_F<-diag(1/sqrt(rm))%*%svdS$u%*%diag(svdS$d
canalF<-diag(1/sqrt(rm))%*%svdS$u%*%diag(svdS$d
canalF<-diag(1/sqrt(rm))%*%svdS$u%*%diag(svdS$d)
canal_F<-diag(1/sqrt(rm))%*%svdS$u%*%diag(svdS$d)
canal_G<-diag(1/sqrt(cm))%*%svdS$v
canal_F
rm
cm
s
s
S
svdS
canal_f
canal_F
canal_G
canal
canal_G<-diag(1/sqrt(cm))%*%svdS$v%*%diag(svd$d)
canal_G<-diag(1/sqrt(cm))%*%svdS$v%*%diag(svdS$d)
canal_G
#principal coordinates
canal_F<-diag(1/sqrt(rm))%*%svdS$u
canal_G<-diag(1/sqrt(cm))%*%svdS$v
#principal coordinates
canal_F<-diag(1/sqrt(rm))%*%svdS$u[,1:2]
canal_G<-diag(1/sqrt(cm))%*%svdS$v[,1:2]
canal_F
#principal coordinates
canal_F<-t(diag(1/sqrt(rm))%*%svdS$u[,1:2])
canal_G<-t(diag(1/sqrt(cm))%*%svdS$v[,1:2])
canal_F
tss <- c()
for(j in 1:ncol(S)){
tssVec <- c()
for(i in 1:nrow(S)){
b <- sum(((S[i,]))^2)
tssVec <- c(tssVec, b)
}
tss <- c(tss, sum(tssVec))
}
sum(tss)
canal
#intertia
tss <- c()
for(j in 1:ncol(S)){
tssVec <- c()
for(i in 1:nrow(S)){
b <- ((P[i,j]-rm[i]*cm[j])^2)/(rm[i]*cm[j])
tssVec <- c(tssVec, b)
}
tss <- c(tss, sum(tssVec))
}
sum(tss)
#eigenvalues
eigS <- eigen(S)
S
svdS
svdS$d
svdS$d[1]/sum(sdsS$d)
svdS$d[1]/sum(svdS$d)
tss
sum(S)
sum(S^2)
total
total <- sum(tss)
total
#total inertia
total<- sum(S^2)
S
tss <- c()
for(j in 1:ncol(S)){
tssVec <- c()
for(i in 1:nrow(S)){
b <- ((P[i,j]-rm[i]*cm[j])^2)/(rm[i]*cm[j])
tssVec <- c(tssVec, b)
}
tss <- c(tss, sum(tssVec))
}
total <- sum(tss)
tss <- c()
for(i in 1:nrow(S)){
tssVec <- c()
for(j in 1:ncol(S)){
b <- ((P[i,j]-rm[i]*cm[j])^2)/(rm[i]*cm[j])
tssVec <- c(tssVec, b)
}
tss <- c(tss, sum(tssVec))
}
#vector is the inertia of the columns
inerR
#vector is the inertia of the columns
inerR<-tss
inerR
#equivalent to sum of S^2
total<-sum(S^2)
#eigenvalues
eigS <- eigen(S^2)
?ca
canal
canal$sv
canal$nd
canal
summary(canal)
fviz_ca_biplot(canal,repel = T,col.col = pal[[1]],col.row = pal[[4]]) + fte_theme()
fviz_ca_biplot(canal,repel = T,col.col = pal[[1]],col.row = pal[[4]]) + fte_theme()
kable_styling(kableExtra::kable(round(data.frame(data_pcaCor$rotation)[,1:4],2)),
full_width = F,
latex_options = c("striped","hold_position"))
ds
ld
data.frame(matrix(c(mean(apply(FUN=ax,MARGIN=1,subset(dat,Breed==1)[,-1])),
mean(apply(FUN=ax,MARGIN=1,subset(dat,Breed==5)[,-1])),
mean(apply(FUN=ax,MARGIN=1,subset(dat,Breed==8)[,-1]))),nrow=1))
data.frame(matrix(c(mean(subset(dat,Breed==1)[,-1]),
mean(subset(dat,Breed==5)[,-1]),
mean(subset(dat,Breed==8)[,-1])),nrow=1))
mean(subset(dat,Breed==1)[,-1])
apply(FUN=mean,MARGIN=0,subset(dat,Breed==1)[,-1])
subset(dat,Breed==1)[,-1]
?apply
apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1])
xmeans <- data.frame(matrix(c(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),
apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),
apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1])),nrow=1))
xmeans
apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1])
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7)
xmeans <- data.frame(matrix(c(matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7)),nrow=1))
xmeans
xmeans <- data.frame(matrix(cbind(matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7)),nrow=7))
xmeans
x <- matrix(c(51,1128,70.9,7,0.25,54.8,1720),nrow=7)
matrix(cbind(rep(x,3)),nrow=7)
matrix(cbind(rep(x,3)),nrow=7)-xmeans
ax2<- function(x){
coef <- t(matrix(ld$scaling,nrow=7)[,1])
xmeans <- data.frame(matrix(cbind(matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7)),nrow=7))
return((coef%*%(matrix(cbind(rep(x,3)),nrow=7)-xmeans)))
}
ds<-ax2(x)
(matrix(cbind(rep(x,3)),nrow=7)-xmeans)
coef
ds<-ax2(x)
t(matrix(ld$scaling,nrow=7)[,1])
matrix(ld$scaling,nrow=7)[,1]
matrix(cbind(rep(x,3)),nrow=7)-xmeans
ax2<- function(x){
coef <- t(matrix(ld$scaling,nrow=7)[,1])
xmeans <- data.frame(matrix(cbind(matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7)),nrow=7))
return((coef%*%(matrix(matrix(cbind(rep(x,3)),nrow=7)-xmeans))))
}
ds<-ax2(x)
matrix(matrix(cbind(rep(x,3)),nrow=7)-xmeans)))
matrix(matrix(cbind(rep(x,3)),nrow=7)-xmeans))
matrix(matrix(cbind(rep(x,3)),nrow=7)-xmeans)
xmeans
matrix(xmeans)
as.matrix(xmeans)
ax2<- function(x){
coef <- t(matrix(ld$scaling,nrow=7)[,1])
xmeans <- data.frame(matrix(cbind(matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7)),nrow=7))
return((coef%*%(matrix(cbind(rep(x,3)),nrow=7)-as.matrix(xmeans))))
}
ds<-ax2(x)
ds
ax2<- function(x){
coef <- t(matrix(ld$scaling,nrow=7)[,1])
xmeans <- data.frame(matrix(cbind(matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==1)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==5)[,-1]),nrow=7),
matrix(apply(FUN=mean,MARGIN=2,subset(dat,Breed==8)[,-1]),nrow=7)),nrow=7))
return((coef%*%(matrix(cbind(rep(x,3)),nrow=7)-as.matrix(xmeans))))
}
ds<-ax2(x)
ds
ds2 <- ds^2
ds2
0.6443663^2
?janitor
?coin
?cca
library(CCA)
??coin
?boot
?cca.fd
?`CCA-package`
?'boot-package'
?`boot-package'
0
''
``
`
?boot
?dplyr
??dplyr
??nlme
library(geepack) # generalized estimating equations
??GGally
??broom
??MASS
?stats4
??stats4
?splines
library(help = "splines")
??VGAM
??magrittrr
??ggpubr
?ResourceSelection
??ResourceSelection
?OceanView
??OceanView
??matlib
?car5
?car
??car
??biotools
??ggalt
??hrbrthemes
data = read.csv('../groundtruth.csv')
#set wd to where data is
setwd('C:/Users/David/OneDrive/Documents/Work/Thesis/github/data/groundtruth')
data = read.csv('../groundtruth.csv')
#choose number of frames to use
frames = 1
#intialize data frame
df = data.frame(frame = as.integer(),
id = as.integer(),
team = as.character(),
x=as.numeric(),
y=as.numeric(),
vX=as.numeric(),
vY=as.numeric())
#add data for each frame
for (i in 1:frames){
temp = as.data.frame(matrix(data[i,], ncol=8, byrow=TRUE))
temp[1,1:4] = temp[1,5:8]
temp = temp[,1:4]
temp = cbind(rep(i,23),seq(1,23),c('b',rep('h',11),rep('a',11)),temp)
colnames(temp) =  c('frame','id',"team",'x','y','vX','vY')
if (i > 1){
df = rbind(df,temp)
}
else{
df = temp
}
}
#clean up
df$x<-as.numeric(df$x)+53.5
df$y<-as.numeric(df$y)+35
df$vX<-as.numeric(df$vX)
df$vY<-as.numeric(df$vY)
df$speed <- sqrt((vX)^2+(vY)^2)
df$speedGroup <- as.numeric(cut(df$speed, seq(0,3,by=0.1),include.lowest = T))
df$time <- as.numeric(df$frame)/10
df$vX<-as.numeric(df$vX)
df$vY<-as.numeric(df$vY)
df$speed <- sqrt((vX)^2+(vY)^2)
df$speed <- sqrt((df$vX)^2+(df$vY)^2)
df$speedGroup <- as.numeric(cut(df$speed, seq(0,3,by=0.1),include.lowest = T))
df$time <- as.numeric(df$frame)/10
View(df)
frames = 1
#intialize data frame
df = data.frame(frame = as.integer(),
id = as.integer(),
team = as.character(),
x=as.numeric(),
y=as.numeric(),
vX=as.numeric(),
vY=as.numeric())
#add data for each frame
for (i in 1:frames){
temp = as.data.frame(matrix(data[i,], ncol=8, byrow=TRUE))
temp[1,1:4] = temp[1,5:8]
temp = temp[,1:4]
temp = cbind(rep(i,23),seq(1,23),c('b',rep('h',11),rep('a',11)),temp)
colnames(temp) =  c('frame','id',"team",'x','y','vX','vY')
if (i > 1){
df = rbind(df,temp)
}
else{
df = temp
}
}
#clean up
df$x<-as.numeric(df$x)
df$y<-as.numeric(df$y)
df$vX<-as.numeric(df$vX)
df$vY<-as.numeric(df$vY)
df$speed <- sqrt((df$vX)^2+(df$vY)^2)
df$speedGroup <- as.numeric(cut(df$speed, seq(0,3,by=0.1),include.lowest = T))
df$time <- as.numeric(df$frame)/10
View(df)
#intialize data frame
df = data.frame(frame = as.integer(),
id = as.integer(),
team = as.character(),
x=as.numeric(),
y=as.numeric(),
vX=as.numeric(),
vY=as.numeric())
#add data for each frame
for (i in 1:frames){
temp = as.data.frame(matrix(data[i,], ncol=8, byrow=TRUE))
temp[1,1:4] = temp[1,5:8]
temp = temp[,1:4]
temp = cbind(rep(i,23),seq(1,23),c('b',rep('h',11),rep('a',11)),temp)
colnames(temp) =  c('frame','id',"team",'x','y','vX','vY')
if (i > 1){
df = rbind(df,temp)
}
else{
df = temp
}
}
View(df)
View(data)
View(df)
#choose number of frames to use
frames = nrow(data)
#intialize data frame
df = data.frame(frame = as.integer(),
id = as.integer(),
team = as.character(),
x=as.numeric(),
y=as.numeric(),
vX=as.numeric(),
vY=as.numeric())
#add data for each frame
for (i in 1:frames){
temp = as.data.frame(matrix(data[i,], ncol=8, byrow=TRUE))
temp[1,1:4] = temp[1,5:8]
temp = temp[,1:4]
temp = cbind(rep(i,23),seq(1,23),c('b',rep('h',11),rep('a',11)),temp)
colnames(temp) =  c('frame','id',"team",'x','y','vX','vY')
if (i > 1){
df = rbind(df,temp)
}
else{
df = temp
}
}
#clean up
df$x<-as.numeric(df$x)
df$y<-as.numeric(df$y)
df$vX<-as.numeric(df$vX)
df$vY<-as.numeric(df$vY)
df$speed <- sqrt((df$vX)^2+(df$vY)^2)
df$speedGroup <- as.numeric(cut(df$speed, seq(0,3,by=0.1),include.lowest = T))
df$time <- as.numeric(df$frame)/10
